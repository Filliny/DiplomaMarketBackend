Index: DiplomaMarketBackend/Controllers/FiltersAdminController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using DiplomaMarketBackend.Abstract;\r\nusing DiplomaMarketBackend.Entity;\r\nusing DiplomaMarketBackend.Entity.Models;\r\nusing DiplomaMarketBackend.Helpers;\r\nusing DiplomaMarketBackend.Models;\r\nusing Mapster;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace DiplomaMarketBackend.Controllers\r\n{\r\n    [ApiController]\r\n    [Route(\"api/[controller]\")]\r\n    public class FiltersAdminController : Controller\r\n    {\r\n        ILogger<GoodsController> _logger;\r\n        BaseContext _context;\r\n        IFileService _fileService;\r\n\r\n        public FiltersAdminController(ILogger<GoodsController> logger, BaseContext context, IFileService fileService)\r\n        {\r\n            _logger = logger;\r\n            _context = context;\r\n            _fileService = fileService;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Get list of categories that have settings added\r\n        /// </summary>\r\n        /// <returns>List of categories with id and name</returns>\r\n        [HttpGet]\r\n        [Route(\"get-list\")]\r\n        public async Task<IActionResult> GetSettedList()\r\n        {\r\n            var result = await _context.FixedFilterSettings.\r\n                Include(f=>f.Category.Name).\r\n                Select(f=>new {id= f.Id, name = f.Category.Name.OriginalText}).ToListAsync();\r\n\r\n            return Json(result);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Get list of categories that haven't settings added-( for new setting in admin interface)\r\n        /// </summary>\r\n        /// <returns></returns>\r\n        [HttpGet]\r\n        [Route(\"get-candidates\")]\r\n        public async Task<IActionResult> GetCandidatesList()\r\n        {\r\n            var existing  = await _context.FixedFilterSettings.Include(f => f.Category.Name).Select(f =>  f.CategoryId).ToListAsync();\r\n            var categoryes = await _context.Categories.\r\n                 Include(c => c.Name).\r\n                 Where(c=> !existing.Contains(c.Id)).\r\n                 Select(c => new { id = c.Id, name = c.Name.OriginalText }).ToListAsync();\r\n\r\n            return Json(categoryes);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Get settings for given category id\r\n        /// </summary>\r\n        /// <param name=\"category_id\"></param>\r\n        /// <returns></returns>\r\n        [HttpGet]\r\n        [Route(\"get-settings\")]\r\n        public async Task<ActionResult<FixedFilter>> GetFilterSettings([FromQuery] int category_id = 0)\r\n        {\r\n            var settings = await _context.FixedFilterSettings.Include(c=>c.Category.Name).\r\n                FirstOrDefaultAsync(s=>s.CategoryId == category_id)?? new FixedFilterSettingsModel();\r\n\r\n            var common_filters = await _context.ArticleCharacteristics.AsSplitQuery().\r\n                    Include(c => c.Title.Translations).\r\n                    Include(c => c.Values).ThenInclude(v => v.Title.Translations).\r\n                    Where(c => c.CategoryId == null).ToListAsync();\r\n\r\n            var response = settings.Adapt<FixedFilter>();\r\n            response.category_name = settings.Category?.Name.OriginalText;\r\n\r\n            foreach (var filter in common_filters) {\r\n\r\n                var character_dto = new FixedFilter.CharacteristicType\r\n                {\r\n                    id = filter.Id,\r\n                    characteristic_names = filter.Title.Translations.ToDictionary(t => t.LanguageId ?? \"\", t => t.TranslationString ?? \"\"),\r\n                }; \r\n\r\n                foreach(var value in filter.Values) {\r\n\r\n                    character_dto.values.Add(new FixedFilter.ValueType\r\n                    {\r\n                        id = value.Id,\r\n                        value_names = value.Title.Translations.ToDictionary(t => t.LanguageId ?? \"\", t => t.TranslationString ?? \"\")\r\n                    });\r\n                }\r\n\r\n                response.characteristics.Add(character_dto);\r\n            }\r\n\r\n            return Json(response);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Create settings from given values\r\n        /// </summary>\r\n        /// <param name=\"filter\">Filtes data with trasnslations added (u can send only changed data or only settings)</param>\r\n        /// <returns>Ok if success</returns>\r\n        [HttpPost]\r\n        [Route(\"create\")]\r\n        public async Task<ActionResult<FixedFilter>> CreateSetting([FromBody] FixedFilter filter)\r\n        {\r\n            if (_context.FixedFilterSettings.Any(f => f.CategoryId == filter.category_id)) return BadRequest(new Result\r\n            {\r\n                Status = \"Error\",\r\n                Message = \"Settings for this category already exist\",\r\n                Entity = filter\r\n            });\r\n\r\n            var  settings = filter.Adapt<FixedFilterSettingsModel>();\r\n\r\n            //update strings if have sended\r\n            if(filter.characteristics != null && filter.characteristics.Count > 0)\r\n            {\r\n                var common_filters = await _context.ArticleCharacteristics.AsSplitQuery().\r\n                    Include(c => c.Title.Translations).\r\n                    Include(c => c.Values).ThenInclude(v => v.Title.Translations).\r\n                    Where(c => c.CategoryId == null).ToListAsync();\r\n\r\n                foreach (var characteristic in filter.characteristics)\r\n                {\r\n                    var ex_charact = common_filters.FirstOrDefault(f => f.Id == characteristic.id);\r\n                    if (ex_charact != null)\r\n                        TextContentHelper.UpdateFromDictionary(_context, ex_charact.Title, characteristic.characteristic_names, false);\r\n\r\n                    foreach(var value in  characteristic.values)\r\n                    {\r\n                        var ex_value = ex_charact.Values.FirstOrDefault(v=>v.Id == value.id);\r\n                        if(ex_value != null)\r\n                            TextContentHelper.UpdateFromDictionary(_context,ex_value.Title,value.value_names, false);\r\n                    }\r\n                }   \r\n\r\n            }\r\n\r\n            _context.FixedFilterSettings.Add(settings);\r\n            _context.SaveChanges();\r\n\r\n            return Ok(new Result\r\n            {\r\n                Status = \"Success\",\r\n                Message = \"Settings added sucessfullty\",\r\n                Entity = filter\r\n            });\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update setting by given values\r\n        /// </summary>\r\n        /// <param name=\"filter\"></param>\r\n        /// <returns></returns>\r\n        [HttpPut]\r\n        [Route(\"update\")]\r\n        public async Task<ActionResult<FixedFilter>> UpdateSetting([FromBody] FixedFilter filter)\r\n        {\r\n            if (!_context.FixedFilterSettings.Any(f => f.Id == filter.category_id)) return BadRequest(new Result\r\n            {\r\n                Status = \"Error\",\r\n                Message = \"Settings for this category not exist\",\r\n                Entity = filter\r\n            });\r\n\r\n            var settings = await _context.FixedFilterSettings.FindAsync(filter.id);\r\n            filter.Adapt(settings);\r\n            \r\n            \r\n            //update strings if have sended\r\n            if (filter.characteristics != null && filter.characteristics.Count > 0)\r\n            {\r\n                var common_filters = await _context.ArticleCharacteristics.AsSplitQuery().\r\n                    Include(c => c.Title.Translations).\r\n                    Include(c => c.Values).ThenInclude(v => v.Title.Translations).\r\n                    Where(c => c.CategoryId == null).ToListAsync();\r\n\r\n                foreach (var characteristic in filter.characteristics)\r\n                {\r\n                    var ex_charact = common_filters.FirstOrDefault(f => f.Id == characteristic.id);\r\n                    if (ex_charact != null)\r\n                        TextContentHelper.UpdateFromDictionary(_context, ex_charact.Title, characteristic.characteristic_names, false);\r\n\r\n                    foreach (var value in characteristic.values)\r\n                    {\r\n                        var ex_value = ex_charact.Values.FirstOrDefault(v => v.Id == value.id);\r\n                        if (ex_value != null)\r\n                            TextContentHelper.UpdateFromDictionary(_context, ex_value.Title, value.value_names, false);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            _context.FixedFilterSettings.Update(settings);\r\n            _context.SaveChanges();\r\n\r\n            return Ok(new Result\r\n            {\r\n                Status = \"Success\",\r\n                Message = \"Settings updated successfully\",\r\n                Entity = filter\r\n            });\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Remove settings by given id\r\n        /// </summary>\r\n        /// <param name=\"setting_id\"></param>\r\n        /// <returns></returns>\r\n        [HttpDelete]\r\n        [Route(\"delete\")]\r\n        public async Task<ActionResult<FixedFilter>> DeleteSetting([FromQuery] int setting_id)\r\n        {\r\n            if (!_context.FixedFilterSettings.Any(f => f.Id == setting_id)) return BadRequest(new Result\r\n            {\r\n                Status = \"Error\",\r\n                Message = \"Settings not found\",\r\n               \r\n            });\r\n            var settings = _context.FixedFilterSettings.First(f => f.Id == setting_id);\r\n\r\n            _context.FixedFilterSettings.Remove(settings);\r\n            _context.SaveChanges();\r\n\r\n            return Ok(new Result\r\n            {\r\n                Status = \"Success\",\r\n                Message = \"Settings removed sucessfullty\",\r\n\r\n            });\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Get category-related characteristics that not shown in filter currently\r\n        /// </summary>\r\n        /// <param name=\"category_id\">Category id</param>\r\n        /// <param name=\"search\">search string from drop-down</param>\r\n        /// <param name=\"lang\">language</param>\r\n        /// <returns>List of characteristics</returns>\r\n        [HttpGet]\r\n        [Route(\"get-unselected\")]\r\n        public async Task<ActionResult<FilterCharacteristics>> GetUnselected([FromQuery] int category_id, string? search, string lang)\r\n        {\r\n            lang = lang.NormalizeLang();\r\n            \r\n            var category = _context.Categories.AsNoTracking().\r\n                Include(c => c.Name.Translations).\r\n                FirstOrDefault(c => c.Id == category_id);\r\n\r\n            var charakteristics = await _context.ArticleCharacteristics.\r\n                Include(c => c.Title.Translations).\r\n                Include(c=>c.Category.Name.Translations).\r\n                Where(c => c.CategoryId == category_id && !c.show_in_filter).ToListAsync();\r\n\r\n            if (search != null)\r\n            {\r\n                charakteristics = charakteristics.Where(c => c.Title.Translations.Any(t => t.TranslationString.ToUpper().Contains(search.ToUpper()) && t.LanguageId == lang)).ToList();\r\n            }\r\n\r\n            var result = new FilterCharacteristics\r\n            {\r\n                category_id = category_id,\r\n                category_name = category?.Name.Content(lang)??\"\"\r\n            };\r\n\r\n            foreach (var charakter in charakteristics)\r\n            {\r\n                result.chartacteristics.Add(new FilterCharacteristics.ListChracteristic\r\n                {\r\n                    id = charakter.Id,\r\n                    name = charakter.Title.Content(lang)\r\n\r\n                });\r\n            }\r\n\r\n            return new JsonResult(result);\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Get category-related characteristics that shown in filter currently\r\n        /// </summary>\r\n        /// <param name=\"category_id\">Category id</param>\r\n        /// <param name=\"lang\">language</param>\r\n        /// <returns>List of characteristics showed in filter</returns>\r\n        [HttpGet]\r\n        [Route(\"get-selected\")]\r\n        public async Task<ActionResult<FilterCharacteristics>> GetSelected([FromQuery] int category_id, string lang)\r\n        {\r\n            lang = lang.NormalizeLang();\r\n\r\n            var category = _context.Categories.AsNoTracking().\r\n                Include(c => c.Name.Translations).\r\n                FirstOrDefault(c => c.Id == category_id);\r\n\r\n            var charakteristics = await _context.ArticleCharacteristics.\r\n                Include(c => c.Title.Translations).\r\n                Include(c => c.Category.Name.Translations).\r\n                Where(c => c.CategoryId == category_id && c.show_in_filter).\r\n                ToListAsync();\r\n\r\n            var result = new FilterCharacteristics {\r\n\r\n                category_id = category_id,\r\n                category_name = category?.Name.Content(lang)??\"\"\r\n            };\r\n\r\n            foreach (var charakter in charakteristics)\r\n            {\r\n                result.chartacteristics.Add(new FilterCharacteristics.ListChracteristic\r\n                {\r\n                    id = charakter.Id,\r\n                    name = charakter.Title?.Content(lang)??\"\"\r\n                });\r\n            }\r\n\r\n            return new JsonResult(result);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update showed characteristics list\r\n        /// </summary>\r\n        /// <param name=\"update_list\">Filter characteristic entity contains only selected for showing characteristics</param>\r\n        /// <returns>Ok if success</returns>\r\n        [HttpPatch]\r\n        [Route(\"filters-update\")]\r\n        public async Task<IActionResult> UpdateShowed([FromBody ] FilterCharacteristics update_list)\r\n        {\r\n            var category_caharacteristics = await _context.ArticleCharacteristics.\r\n                Where(c => c.CategoryId == update_list.category_id).ToListAsync();\r\n\r\n            foreach(var characteristic in  category_caharacteristics)\r\n            {\r\n                if(update_list.chartacteristics.Any(c=>c.id == characteristic.Id))\r\n                {\r\n                    characteristic.show_in_filter = true;\r\n                }\r\n                else\r\n                {\r\n                    characteristic.show_in_filter = false;\r\n                }\r\n\r\n                _context.ArticleCharacteristics.Update(characteristic);\r\n\r\n            }\r\n\r\n            await _context.SaveChangesAsync();\r\n\r\n            return Ok();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DiplomaMarketBackend/Controllers/FiltersAdminController.cs b/DiplomaMarketBackend/Controllers/FiltersAdminController.cs
--- a/DiplomaMarketBackend/Controllers/FiltersAdminController.cs	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
+++ b/DiplomaMarketBackend/Controllers/FiltersAdminController.cs	(date 1687784222169)
@@ -47,7 +47,10 @@
         [Route("get-candidates")]
         public async Task<IActionResult> GetCandidatesList()
         {
-            var existing  = await _context.FixedFilterSettings.Include(f => f.Category.Name).Select(f =>  f.CategoryId).ToListAsync();
+            var existing  = await _context.FixedFilterSettings.
+                Include(f => f.Category.Name).
+                Select(f =>  f.CategoryId).ToListAsync();
+            
             var categoryes = await _context.Categories.
                  Include(c => c.Name).
                  Where(c=> !existing.Contains(c.Id)).
Index: .idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_11_06_2023_19_51__Changes_.xml
===================================================================
diff --git a/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_11_06_2023_19_51__Changes_.xml b/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_11_06_2023_19_51__Changes_.xml
deleted file mode 100644
--- a/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_11_06_2023_19_51__Changes_.xml	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
+++ /dev/null	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_06_2023_19_51_[Changes]" date="1686502326529" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_11_06_2023_19_51_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11.06.2023 19:51 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_08_06_2023_18_04__Changes_.xml
===================================================================
diff --git a/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_08_06_2023_18_04__Changes_.xml b/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_08_06_2023_18_04__Changes_.xml
deleted file mode 100644
--- a/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_08_06_2023_18_04__Changes_.xml	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
+++ /dev/null	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_08_06_2023_18_04_[Changes]" date="1686236681200" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_08_06_2023_18_04_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 08.06.2023 18:04 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_12_06_2023_13_23__Changes_.xml
===================================================================
diff --git a/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_12_06_2023_13_23__Changes_.xml b/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_12_06_2023_13_23__Changes_.xml
deleted file mode 100644
--- a/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_12_06_2023_13_23__Changes_.xml	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
+++ /dev/null	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_12_06_2023_13_23_[Changes]" date="1686565412586" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_12_06_2023_13_23_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 12.06.2023 13:23 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/.idea.DiplomaMarketBackend/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoGeneratedRunConfigurationManager\">\r\n    <projectFile kind=\"Docker\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n    <projectFile profileName=\"IIS Express\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n    <projectFile profileName=\"http\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n    <projectFile profileName=\"https\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n    <projectFile profileName=\"https_test\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n    <projectFile pubXmlPath=\"DiplomaMarketBackend/Properties/PublishProfiles/registry.hub.docker.com_filliny1.pubxml\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n    <projectFile pubXmlPath=\"DiplomaMarketBackend/Properties/PublishProfiles/registry.hub.docker.com_filliny11.pubxml\">DiplomaMarketBackend/DiplomaMarketBackend.csproj</projectFile>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"68cc5178-c05a-41ab-b028-2f48d4e63632\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/UITests/ArticleDisplayTest_Success.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/DiplomaMarketBackend/Controllers/OrdersController.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Controllers/OrdersController.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/DiplomaMarketBackend/Models/Order.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Models/Order.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/DiplomaMarketBackend/Models/UserContacts.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Models/UserContacts.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/DiplomaMarketBackend/Models/UserFull.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Models/UserFull.cs\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"mock:///Dummy.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n    <setting file=\"mock:///Dummy.cs\" root0=\"SKIP_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MetaFilesCheckinStateConfiguration\" checkMetaFiles=\"false\" />\r\n  <component name=\"ProjectId\" id=\"2QhyoXfO1BAKaZvICw5dgBSJACs\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"CodeLensConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"rider.external.source.directories\": [\r\n      \"/Users/oleg/Library/Application Support/JetBrains/Rider2023.1/resharper-host/DecompilerCache\",\r\n      \"/Users/oleg/Library/Application Support/JetBrains/Rider2023.1/resharper-host/SourcesCache\",\r\n      \"/Users/oleg/.local/share/Symbols/src\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\" selected=\"Docker.DiplomaMarketBackend/Dockerfile  build\">\r\n    <configuration name=\"DiplomaMarketBackend: registry.hub.docker.com_filliny1\" type=\"DotNetMsBuildPublish\" factoryName=\"Publish to IIS\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" publish_profile=\"&lt;no publish profile&gt;\" pubxml_path=\"$PROJECT_DIR$/DiplomaMarketBackend/Properties/PublishProfiles/registry.hub.docker.com_filliny1.pubxml\" user_name=\"filliny1\" uuid_high=\"1754325455525396765\" uuid_low=\"-8689101690245568343\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend: registry.hub.docker.com_filliny11\" type=\"DotNetMsBuildPublish\" factoryName=\"Publish to IIS\">\r\n      <riderPublish configuration=\"Release\" platform=\"Any CPU\" publish_profile=\"&lt;no publish profile&gt;\" pubxml_path=\"$PROJECT_DIR$/DiplomaMarketBackend/Properties/PublishProfiles/registry.hub.docker.com_filliny11.pubxml\" user_name=\"filliny1\" uuid_high=\"1754325455525396765\" uuid_low=\"-8689101690245568343\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend: IIS Express\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/DiplomaMarketBackend/DiplomaMarketBackend.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\"net7.0\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"IIS Express\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend: http\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/DiplomaMarketBackend/DiplomaMarketBackend.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\"net7.0\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"http\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend: https\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/DiplomaMarketBackend/DiplomaMarketBackend.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\"net7.0\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"https\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend: https_test\" type=\"LaunchSettings\" factoryName=\".NET Launch Settings Profile\">\r\n      <option name=\"LAUNCH_PROFILE_PROJECT_FILE_PATH\" value=\"$PROJECT_DIR$/DiplomaMarketBackend/DiplomaMarketBackend.csproj\" />\r\n      <option name=\"LAUNCH_PROFILE_TFM\" value=\"net7.0\" />\r\n      <option name=\"LAUNCH_PROFILE_NAME\" value=\"https_test\" />\r\n      <option name=\"USE_EXTERNAL_CONSOLE\" value=\"0\" />\r\n      <option name=\"USE_MONO\" value=\"0\" />\r\n      <option name=\"RUNTIME_ARGUMENTS\" value=\"\" />\r\n      <option name=\"GENERATE_APPLICATIONHOST_CONFIG\" value=\"1\" />\r\n      <option name=\"SHOW_IIS_EXPRESS_OUTPUT\" value=\"0\" />\r\n      <option name=\"SEND_DEBUG_REQUEST\" value=\"1\" />\r\n      <option name=\"ADDITIONAL_IIS_EXPRESS_ARGUMENTS\" value=\"\" />\r\n      <method v=\"2\">\r\n        <option name=\"Build\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend/Dockerfile  build\" type=\"docker-deploy\" factoryName=\"dockerfile\" server-name=\"Docker\">\r\n      <deployment type=\"dockerfile\">\r\n        <settings>\r\n          <option name=\"imageTag\" value=\"filliny1/diplomamarketbackend:latest\" />\r\n          <option name=\"buildOnly\" value=\"true\" />\r\n          <option name=\"containerName\" value=\"diplomamarketbackend\" />\r\n          <option name=\"contextFolderPath\" value=\".\" />\r\n          <option name=\"publishAllPorts\" value=\"true\" />\r\n          <option name=\"showCommandPreview\" value=\"true\" />\r\n          <option name=\"sourceFilePath\" value=\"DiplomaMarketBackend/Dockerfile\" />\r\n        </settings>\r\n      </deployment>\r\n      <EXTENSION ID=\"com.jetbrains.rider.docker.debug\" isFastModeEnabled=\"true\" isSslEnabled=\"true\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"DiplomaMarketBackend/Dockerfile\" type=\"docker-deploy\" factoryName=\"dockerfile\" server-name=\"Docker\">\r\n      <deployment type=\"dockerfile\">\r\n        <settings>\r\n          <option name=\"imageTag\" value=\"filliny1/diplomamarketbackend:latest\" />\r\n          <option name=\"containerName\" value=\"diplomamarketbackend\" />\r\n          <option name=\"contextFolderPath\" value=\".\" />\r\n          <option name=\"publishAllPorts\" value=\"true\" />\r\n          <option name=\"showCommandPreview\" value=\"true\" />\r\n          <option name=\"sourceFilePath\" value=\"DiplomaMarketBackend/Dockerfile\" />\r\n        </settings>\r\n      </deployment>\r\n      <EXTENSION ID=\"com.jetbrains.rider.docker.debug\" isFastModeEnabled=\"true\" isSslEnabled=\"true\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"docker-image\" temporary=\"true\">\r\n      <deployment type=\"docker-image\">\r\n        <settings />\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"dockerfile\" temporary=\"true\">\r\n      <deployment type=\"dockerfile\">\r\n        <settings />\r\n      </deployment>\r\n      <EXTENSION ID=\"com.jetbrains.rider.docker.debug\" isFastModeEnabled=\"true\" isSslEnabled=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\".NET Launch Settings Profile.DiplomaMarketBackend: http\" />\r\n      <item itemvalue=\".NET Launch Settings Profile.DiplomaMarketBackend: https\" />\r\n      <item itemvalue=\".NET Launch Settings Profile.DiplomaMarketBackend: https_test\" />\r\n      <item itemvalue=\".NET Launch Settings Profile.DiplomaMarketBackend: IIS Express\" />\r\n      <item itemvalue=\"Docker.DiplomaMarketBackend/Dockerfile\" />\r\n      <item itemvalue=\"Docker.DiplomaMarketBackend/Dockerfile  build\" />\r\n      <item itemvalue=\"Publish to IIS.DiplomaMarketBackend: registry.hub.docker.com_filliny1\" />\r\n      <item itemvalue=\"Publish to IIS.DiplomaMarketBackend: registry.hub.docker.com_filliny11\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"68cc5178-c05a-41ab-b028-2f48d4e63632\" name=\"Changes\" comment=\"\" />\r\n      <created>1685820286762</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685820286762</updated>\r\n      <workItem from=\"1685820287894\" duration=\"712000\" />\r\n      <workItem from=\"1686572749526\" duration=\"5265000\" />\r\n      <workItem from=\"1686591671918\" duration=\"647000\" />\r\n      <workItem from=\"1687362276922\" duration=\"15109000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"- flat cashe fix\">\r\n      <created>1686140732540</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686140732540</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"- small test fix\">\r\n      <created>1686234568797</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1686234568797</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnityCheckinConfiguration\" checkUnsavedScenes=\"false\" />\r\n  <component name=\"UnityProjectConfiguration\" hasMinimizedUI=\"false\" />\r\n  <component name=\"UnityUnitTestConfiguration\" currentTestLauncher=\"NUnit\" />\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"CLEAR_INITIAL_COMMIT_MESSAGE\" value=\"true\" />\r\n    <MESSAGE value=\"- flat cashe fix\" />\r\n    <MESSAGE value=\"- small test fix\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"- small test fix\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/Tests/OrdersTest.cs</url>\r\n          <line>110</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/Tests/OrdersTest.cs\" initialLine=\"110\" containingFunctionPresentation=\"Method 'CreateNewOrderGuest_Success'\">\r\n            <startOffsets>\r\n              <option value=\"4688\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"4713\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"41\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/Tests/CategoryTest.cs</url>\r\n          <line>111</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/Tests/CategoryTest.cs\" initialLine=\"111\" containingFunctionPresentation=\"Method 'Admin1_CreateCategory_Success'\">\r\n            <startOffsets>\r\n              <option value=\"4553\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"4581\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"44\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend/Controllers/FavoritesController.cs</url>\r\n          <line>58</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Controllers/FavoritesController.cs\" initialLine=\"58\" containingFunctionPresentation=\"Method 'Add'\">\r\n            <startOffsets>\r\n              <option value=\"1755\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"1775\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"53\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend/Controllers/RegistrationController.cs</url>\r\n          <line>181</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Controllers/RegistrationController.cs\" initialLine=\"181\" containingFunctionPresentation=\"Method 'PasswordUpdate'\">\r\n            <startOffsets>\r\n              <option value=\"5945\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"6011\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"109\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend/Controllers/StorageController.cs</url>\r\n          <line>40</line>\r\n          <properties documentPath=\"C:\\Users\\oleg\\source\\repos\\DiplomaMarketBackend\\DiplomaMarketBackend\\Controllers\\StorageController.cs\" initialLine=\"40\" containingFunctionPresentation=\"Method 'GetRefillList'\" />\r\n          <option name=\"timeStamp\" value=\"110\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/UITests/ArticleDisplayTest_Success.cs</url>\r\n          <line>27</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/UITests/ArticleDisplayTest_Success.cs\" initialLine=\"27\" containingFunctionPresentation=\"Method 'ArticleDisplayTest_Success'\">\r\n            <startOffsets>\r\n              <option value=\"884\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"906\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"118\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/Tests/StrorageTest.cs</url>\r\n          <line>43</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/Tests/StrorageTest.cs\" initialLine=\"43\" containingFunctionPresentation=\"Method 'ChangeStatus_Success'\">\r\n            <startOffsets>\r\n              <option value=\"1126\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"1149\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"119\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"DotNet Breakpoints\">\r\n          <url>file://$PROJECT_DIR$/DiplomaMarketBackend/Controllers/OrdersController.cs</url>\r\n          <line>410</line>\r\n          <properties documentPath=\"$PROJECT_DIR$/DiplomaMarketBackend/Controllers/OrdersController.cs\" initialLine=\"410\" containingFunctionPresentation=\"Method 'NewOrder'\">\r\n            <startOffsets>\r\n              <option value=\"15803\" />\r\n            </startOffsets>\r\n            <endOffsets>\r\n              <option value=\"15830\" />\r\n            </endOffsets>\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"127\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n    <pin-to-top-manager>\r\n      <pinned-members>\r\n        <PinnedItemInfo parentTag=\"Type#OpenQA.Selenium.WebElement\" memberName=\"elementId\" />\r\n        <PinnedItemInfo parentTag=\"Type#OpenQA.Selenium.WebElement\" memberName=\"Text\" />\r\n        <PinnedItemInfo parentTag=\"Type#DiplomaMarketBackend.Entity.Models.TextContent\" memberName=\"Translations\" />\r\n      </pinned-members>\r\n    </pin-to-top-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml b/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml
--- a/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml	(revision 0cad1ad1e29ee35945d09d9d06ef7cc0b2f50572)
+++ b/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml	(date 1688652124068)
@@ -14,12 +14,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="68cc5178-c05a-41ab-b028-2f48d4e63632" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/DiplomaMarketBackend.IntegrationTests/UITests/ArticleDisplayTest_Success.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_08_06_2023_18_04__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_11_06_2023_19_51__Changes_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/shelf/Uncommitted_changes_before_Update_at_12_06_2023_13_23__Changes_.xml" beforeDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/.idea.DiplomaMarketBackend/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/DiplomaMarketBackend/Controllers/OrdersController.cs" beforeDir="false" afterPath="$PROJECT_DIR$/DiplomaMarketBackend/Controllers/OrdersController.cs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/DiplomaMarketBackend/Models/Order.cs" beforeDir="false" afterPath="$PROJECT_DIR$/DiplomaMarketBackend/Models/Order.cs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/DiplomaMarketBackend/Models/UserContacts.cs" beforeDir="false" afterPath="$PROJECT_DIR$/DiplomaMarketBackend/Models/UserContacts.cs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/DiplomaMarketBackend/Models/UserFull.cs" beforeDir="false" afterPath="$PROJECT_DIR$/DiplomaMarketBackend/Models/UserFull.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DiplomaMarketBackend/Controllers/FiltersAdminController.cs" beforeDir="false" afterPath="$PROJECT_DIR$/DiplomaMarketBackend/Controllers/FiltersAdminController.cs" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -39,29 +38,29 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "ignore.virus.scanning.warn.message": "true",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "CodeLensConfigurable",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;CodeLensConfigurable&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   },
-  "keyToStringList": {
-    "rider.external.source.directories": [
-      "/Users/oleg/Library/Application Support/JetBrains/Rider2023.1/resharper-host/DecompilerCache",
-      "/Users/oleg/Library/Application Support/JetBrains/Rider2023.1/resharper-host/SourcesCache",
-      "/Users/oleg/.local/share/Symbols/src"
+  &quot;keyToStringList&quot;: {
+    &quot;rider.external.source.directories&quot;: [
+      &quot;C:\\Users\\oleg\\AppData\\Roaming\\JetBrains\\Rider2023.1\\resharper-host\\DecompilerCache&quot;,
+      &quot;C:\\Users\\oleg\\AppData\\Roaming\\JetBrains\\Rider2023.1\\resharper-host\\SourcesCache&quot;,
+      &quot;C:\\Users\\oleg\\AppData\\Local\\Symbols\\src&quot;
     ]
   }
-}]]></component>
-  <component name="RunManager" selected="Docker.DiplomaMarketBackend/Dockerfile  build">
+}</component>
+  <component name="RunManager" selected=".NET Launch Settings Profile.DiplomaMarketBackend: https_test">
     <configuration name="DiplomaMarketBackend: registry.hub.docker.com_filliny1" type="DotNetMsBuildPublish" factoryName="Publish to IIS">
       <riderPublish configuration="Release" platform="Any CPU" publish_profile="&lt;no publish profile&gt;" pubxml_path="$PROJECT_DIR$/DiplomaMarketBackend/Properties/PublishProfiles/registry.hub.docker.com_filliny1.pubxml" user_name="filliny1" uuid_high="1754325455525396765" uuid_low="-8689101690245568343" />
       <method v="2" />
@@ -195,6 +194,7 @@
       <workItem from="1686572749526" duration="5265000" />
       <workItem from="1686591671918" duration="647000" />
       <workItem from="1687362276922" duration="15109000" />
+      <workItem from="1687784091279" duration="1971000" />
     </task>
     <task id="LOCAL-00001" summary="- flat cashe fix">
       <created>1686140732540</created>
