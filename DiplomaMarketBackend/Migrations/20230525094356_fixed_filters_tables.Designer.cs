// <auto-generated />
using System;
using System.Collections.Generic;
using DiplomaMarketBackend.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiplomaMarketBackend.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20230525094356_fixed_filters_tables")]
    partial class fixed_filters_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActionModelArticleModel", b =>
                {
                    b.Property<int>("ActionsId")
                        .HasColumnType("integer");

                    b.Property<int>("ArticlesId")
                        .HasColumnType("integer");

                    b.HasKey("ActionsId", "ArticlesId");

                    b.HasIndex("ArticlesId");

                    b.ToTable("ActionModelArticleModel");
                });

            modelBuilder.Entity("ArticleModelUserModel", b =>
                {
                    b.Property<string>("FavoriteUsersId")
                        .HasColumnType("text");

                    b.Property<int>("FavoritesId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteUsersId", "FavoritesId");

                    b.HasIndex("FavoritesId");

                    b.ToTable("ArticleModelUserModel");
                });

            modelBuilder.Entity("ArticleModelValueModel", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacteristicValuesId")
                        .HasColumnType("integer");

                    b.HasKey("ArticlesId", "CharacteristicValuesId");

                    b.HasIndex("CharacteristicValuesId");

                    b.ToTable("ArticleModelValueModel");
                });

            modelBuilder.Entity("BrandModelCategoryModel", b =>
                {
                    b.Property<int>("BrandsId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.HasKey("BrandsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BrandModelCategoryModel");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ActionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerBig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BannerSmall")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("NameId");

                    b.ToTable("ActionModel");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ArticleCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Comparable")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("filterType")
                        .HasColumnType("integer");

                    b.Property<int>("roz_har_id")
                        .HasColumnType("integer");

                    b.Property<bool>("show_in_filter")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GroupId");

                    b.HasIndex("NameId");

                    b.HasIndex("TitleId");

                    b.ToTable("ArticleCharacteristics");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ArticleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("DocketId")
                        .HasColumnType("integer");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RatingCalculated")
                        .HasColumnType("numeric");

                    b.Property<string>("SellStatus")
                        .HasColumnType("text");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int?>("TopCategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("rztk_art_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("DocketId");

                    b.HasIndex("SellerId");

                    b.HasIndex("TitleId");

                    b.HasIndex("TopCategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.BannerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.BrandModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LogoURL")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("rztk_brand_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.BreadcrumbsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.Property<string>("href")
                        .HasColumnType("text");

                    b.Property<int>("roz_bread_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleModelId");

                    b.HasIndex("TitleId");

                    b.ToTable("Breadcrumbs");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ImgData")
                        .HasColumnType("bytea");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("text");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShowInCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool?>("is_active")
                        .HasColumnType("boolean");

                    b.Property<int?>("rztk_cat_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("NameId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CertificateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Summ")
                        .HasColumnType("numeric");

                    b.Property<bool>("Unused")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CharacteristicGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("groupTitleId")
                        .HasColumnType("integer");

                    b.Property<int>("group_order")
                        .HasColumnType("integer");

                    b.Property<int>("rztk_grp_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("groupTitleId");

                    b.ToTable("CharacteristicGroups");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.AreaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MistRegionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("NpAreaCenterRef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NpRef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.BranchModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("BranchCityId")
                        .HasColumnType("integer");

                    b.Property<string>("DeliveryBranchId")
                        .HasColumnType("text");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("integer");

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocalBranchNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WorkHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BranchCityId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("DescriptionId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.CityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("CoatsuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Index1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Index2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("NpCityRef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("NameId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.DeliveryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.FixedFilterLocalizationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionValueNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ActionsFilterNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ArticleStatusFilterNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("BrandFilterNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("EndingSoonValueNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("InStockValueNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemAwaitedValueNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemEndedValueNameId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("LocalesAvailable")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("LoyalityFilterNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("OutOfStockValueNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("PriceFilterNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadyToShipFilterNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadyToShipValueNameId")
                        .HasColumnType("integer");

                    b.Property<int?>("WithBonusesValueNameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionValueNameId");

                    b.HasIndex("ActionsFilterNameId");

                    b.HasIndex("ArticleStatusFilterNameId");

                    b.HasIndex("BrandFilterNameId");

                    b.HasIndex("EndingSoonValueNameId");

                    b.HasIndex("InStockValueNameId");

                    b.HasIndex("ItemAwaitedValueNameId");

                    b.HasIndex("ItemEndedValueNameId");

                    b.HasIndex("LoyalityFilterNameId");

                    b.HasIndex("OutOfStockValueNameId");

                    b.HasIndex("PriceFilterNameId");

                    b.HasIndex("ReadyToShipFilterNameId");

                    b.HasIndex("ReadyToShipValueNameId");

                    b.HasIndex("WithBonusesValueNameId");

                    b.ToTable("FixedFilterLocalization");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.FixedFilterSettingsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActionsFilterEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBrandFilerEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLoyalityFilterEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriceFilerEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReadyToShipFilterEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStatusFilterEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("FixedFilterSettings");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("base_actionId")
                        .HasColumnType("integer");

                    b.Property<int?>("bigId")
                        .HasColumnType("integer");

                    b.Property<int?>("big_tileId")
                        .HasColumnType("integer");

                    b.Property<int?>("largeId")
                        .HasColumnType("integer");

                    b.Property<int?>("mediumId")
                        .HasColumnType("integer");

                    b.Property<int?>("mobile_largeId")
                        .HasColumnType("integer");

                    b.Property<int?>("mobile_mediumId")
                        .HasColumnType("integer");

                    b.Property<int?>("originalId")
                        .HasColumnType("integer");

                    b.Property<int?>("previewId")
                        .HasColumnType("integer");

                    b.Property<int>("smallId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleModelId");

                    b.HasIndex("base_actionId");

                    b.HasIndex("bigId");

                    b.HasIndex("big_tileId");

                    b.HasIndex("largeId");

                    b.HasIndex("mediumId");

                    b.HasIndex("mobile_largeId");

                    b.HasIndex("mobile_mediumId");

                    b.HasIndex("originalId");

                    b.HasIndex("previewId");

                    b.HasIndex("smallId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.OrderItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.OrderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeliveryBranchId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryBranchId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.PaymentTypesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CallbackURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("NameId");

                    b.HasIndex("ParentId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.PictureModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("height")
                        .HasColumnType("integer");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.Property<int?>("width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.PromoCodeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Issued")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Summ")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ReceiverModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Receivers");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cons")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Dislikes")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("GetEmailOnAnswers")
                        .HasColumnType("boolean");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pros")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint");

                    b.Property<bool>("ReviewApproved")
                        .HasColumnType("boolean");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<List<string>>("UserImages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.SellerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.TagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleModelId");

                    b.HasIndex("NameId");

                    b.HasIndex("TitleId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.TextContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("OriginalLanguageId")
                        .HasColumnType("text");

                    b.Property<string>("OriginalText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OriginalLanguageId");

                    b.ToTable("textContents");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageId")
                        .HasColumnType("text");

                    b.Property<int?>("TextContentId")
                        .HasColumnType("integer");

                    b.Property<string>("TranslationString")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TextContentId");

                    b.ToTable("translations");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ValueModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacteristicTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.Property<string>("href")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicTypeId");

                    b.HasIndex("TitleId");

                    b.ToTable("CharacteristicValues");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.VideoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleModelId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<string>("PreviewURL")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleModelId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.VideoTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VideoTypes");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.WarningModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleModelId")
                        .HasColumnType("integer");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleModelId");

                    b.HasIndex("MessageId");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("Lessons3.Entity.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PreferredLanguageId")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PreferredLanguageId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderModelPromoCodeModel", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("PromoCodesId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "PromoCodesId");

                    b.HasIndex("PromoCodesId");

                    b.ToTable("OrderModelPromoCodeModel");
                });

            modelBuilder.Entity("ActionModelArticleModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ActionModel", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleModelUserModel", b =>
                {
                    b.HasOne("Lessons3.Entity.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("FavoriteUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleModelValueModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.ValueModel", null)
                        .WithMany()
                        .HasForeignKey("CharacteristicValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandModelCategoryModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.BrandModel", null)
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ActionModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Description");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ArticleCharacteristic", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.CharacteristicGroupModel", "Group")
                        .WithMany("options")
                        .HasForeignKey("GroupId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Category");

                    b.Navigation("Group");

                    b.Navigation("Name");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ArticleModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.BrandModel", "Brand")
                        .WithMany("Articles")
                        .HasForeignKey("BrandId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Docket")
                        .WithMany()
                        .HasForeignKey("DocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.SellerModel", "Seller")
                        .WithMany("Articles")
                        .HasForeignKey("SellerId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", "TopCategory")
                        .WithMany()
                        .HasForeignKey("TopCategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Description");

                    b.Navigation("Docket");

                    b.Navigation("Seller");

                    b.Navigation("Title");

                    b.Navigation("TopCategory");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.BreadcrumbsModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany("Breadcrumbs")
                        .HasForeignKey("ArticleModelId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CategoryModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Description");

                    b.Navigation("Name");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CertificateModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.OrderModel", "Order")
                        .WithMany("Certificates")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CharacteristicGroupModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "groupTitle")
                        .WithMany()
                        .HasForeignKey("groupTitleId");

                    b.Navigation("groupTitle");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.AreaModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.BranchModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.Delivery.CityModel", "BranchCity")
                        .WithMany("Branches")
                        .HasForeignKey("BranchCityId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.Delivery.DeliveryModel", "Delivery")
                        .WithMany("Branches")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.Navigation("Address");

                    b.Navigation("BranchCity");

                    b.Navigation("Delivery");

                    b.Navigation("Description");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.CityModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.Delivery.AreaModel", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Area");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.DeliveryModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.FixedFilterLocalizationModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ActionValueName")
                        .WithMany()
                        .HasForeignKey("ActionValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ActionsFilterName")
                        .WithMany()
                        .HasForeignKey("ActionsFilterNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ArticleStatusFilterName")
                        .WithMany()
                        .HasForeignKey("ArticleStatusFilterNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "BrandFilterName")
                        .WithMany()
                        .HasForeignKey("BrandFilterNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "EndingSoonValueName")
                        .WithMany()
                        .HasForeignKey("EndingSoonValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "InStockValueName")
                        .WithMany()
                        .HasForeignKey("InStockValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ItemAwaitedValueName")
                        .WithMany()
                        .HasForeignKey("ItemAwaitedValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ItemEndedValueName")
                        .WithMany()
                        .HasForeignKey("ItemEndedValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "LoyalityFilterName")
                        .WithMany()
                        .HasForeignKey("LoyalityFilterNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "OutOfStockValueName")
                        .WithMany()
                        .HasForeignKey("OutOfStockValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "PriceFilterName")
                        .WithMany()
                        .HasForeignKey("PriceFilterNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ReadyToShipFilterName")
                        .WithMany()
                        .HasForeignKey("ReadyToShipFilterNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "ReadyToShipValueName")
                        .WithMany()
                        .HasForeignKey("ReadyToShipValueNameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "WithBonusesValueName")
                        .WithMany()
                        .HasForeignKey("WithBonusesValueNameId");

                    b.Navigation("ActionValueName");

                    b.Navigation("ActionsFilterName");

                    b.Navigation("ArticleStatusFilterName");

                    b.Navigation("BrandFilterName");

                    b.Navigation("EndingSoonValueName");

                    b.Navigation("InStockValueName");

                    b.Navigation("ItemAwaitedValueName");

                    b.Navigation("ItemEndedValueName");

                    b.Navigation("LoyalityFilterName");

                    b.Navigation("OutOfStockValueName");

                    b.Navigation("PriceFilterName");

                    b.Navigation("ReadyToShipFilterName");

                    b.Navigation("ReadyToShipValueName");

                    b.Navigation("WithBonusesValueName");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.FixedFilterSettingsModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ImageModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", "ArticleModel")
                        .WithMany("Images")
                        .HasForeignKey("ArticleModelId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "base_action")
                        .WithMany()
                        .HasForeignKey("base_actionId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "big")
                        .WithMany()
                        .HasForeignKey("bigId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "big_tile")
                        .WithMany()
                        .HasForeignKey("big_tileId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "large")
                        .WithMany()
                        .HasForeignKey("largeId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "medium")
                        .WithMany()
                        .HasForeignKey("mediumId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "mobile_large")
                        .WithMany()
                        .HasForeignKey("mobile_largeId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "mobile_medium")
                        .WithMany()
                        .HasForeignKey("mobile_mediumId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "original")
                        .WithMany()
                        .HasForeignKey("originalId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "preview")
                        .WithMany()
                        .HasForeignKey("previewId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PictureModel", "small")
                        .WithMany()
                        .HasForeignKey("smallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleModel");

                    b.Navigation("base_action");

                    b.Navigation("big");

                    b.Navigation("big_tile");

                    b.Navigation("large");

                    b.Navigation("medium");

                    b.Navigation("mobile_large");

                    b.Navigation("mobile_medium");

                    b.Navigation("original");

                    b.Navigation("preview");

                    b.Navigation("small");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.OrderItemModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.OrderModel", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.OrderModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.Delivery.BranchModel", "DeliveryBranch")
                        .WithMany()
                        .HasForeignKey("DeliveryBranchId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PaymentTypesModel", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.ReceiverModel", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Lessons3.Entity.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DeliveryBranch");

                    b.Navigation("PaymentType");

                    b.Navigation("Receiver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.PaymentTypesModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PaymentTypesModel", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Description");

                    b.Navigation("Name");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ReceiverModel", b =>
                {
                    b.HasOne("Lessons3.Entity.Models.UserModel", "User")
                        .WithMany("receivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ReviewModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", "Article")
                        .WithMany("Reviews")
                        .HasForeignKey("ArticleId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.ReviewModel", "Review")
                        .WithMany("Answers")
                        .HasForeignKey("ReviewId");

                    b.HasOne("Lessons3.Entity.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ServiceModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.BrandModel", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.Delivery.CityModel", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.TagModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany("Tags")
                        .HasForeignKey("ArticleModelId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Name");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.TextContent", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.Language", "OriginalLanguage")
                        .WithMany()
                        .HasForeignKey("OriginalLanguageId");

                    b.Navigation("OriginalLanguage");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Translation", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "TextContent")
                        .WithMany("Translations")
                        .HasForeignKey("TextContentId");

                    b.Navigation("Language");

                    b.Navigation("TextContent");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ValueModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleCharacteristic", "CharacteristicType")
                        .WithMany("Values")
                        .HasForeignKey("CharacteristicTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("CharacteristicType");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.VideoModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany("Video")
                        .HasForeignKey("ArticleModelId");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.WarningModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.ArticleModel", null)
                        .WithMany("Warning")
                        .HasForeignKey("ArticleModelId");

                    b.HasOne("DiplomaMarketBackend.Entity.Models.TextContent", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Lessons3.Entity.Models.UserModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageId");

                    b.Navigation("PreferredLanguage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Lessons3.Entity.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Lessons3.Entity.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lessons3.Entity.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Lessons3.Entity.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderModelPromoCodeModel", b =>
                {
                    b.HasOne("DiplomaMarketBackend.Entity.Models.OrderModel", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaMarketBackend.Entity.Models.PromoCodeModel", null)
                        .WithMany()
                        .HasForeignKey("PromoCodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ArticleCharacteristic", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ArticleModel", b =>
                {
                    b.Navigation("Breadcrumbs");

                    b.Navigation("Images");

                    b.Navigation("Reviews");

                    b.Navigation("Tags");

                    b.Navigation("Video");

                    b.Navigation("Warning");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.BrandModel", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CategoryModel", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.CharacteristicGroupModel", b =>
                {
                    b.Navigation("options");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.CityModel", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.Delivery.DeliveryModel", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.OrderModel", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.PaymentTypesModel", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.ReviewModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.SellerModel", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("DiplomaMarketBackend.Entity.Models.TextContent", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Lessons3.Entity.Models.UserModel", b =>
                {
                    b.Navigation("receivers");
                });
#pragma warning restore 612, 618
        }
    }
}
